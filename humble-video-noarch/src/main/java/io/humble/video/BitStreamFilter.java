/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.humble.video;
import io.humble.ferry.*;
/**
 * Takes a bit stream and filters bytes passed<br>
 * in to add, remove, or modify the bit-stream.
 */
public class BitStreamFilter extends Configurable {
  // JNIHelper.swg: Start generated code
  // >>>>>>>>>>>>>>>>>>>>>>>>>>>
  /**
   * This method is only here to use some references and remove
   * a Eclipse compiler warning.
   */
  @SuppressWarnings("unused")
  private void noop()
  {
    Buffer.make(null, 1);
  }
   
  private volatile long swigCPtr;

  /**
   * Internal Only.
   */
  protected BitStreamFilter(long cPtr, boolean cMemoryOwn) {
    super(VideoJNI.BitStreamFilter_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }
  
  /**
   * Internal Only.
   */
  protected BitStreamFilter(long cPtr, boolean cMemoryOwn,
      java.util.concurrent.atomic.AtomicLong ref)
  {
    super(VideoJNI.BitStreamFilter_SWIGUpcast(cPtr),
     cMemoryOwn, ref);
    swigCPtr = cPtr;
  }
    
  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that obj is proxying for.
   *   
   * @param obj The java proxy object for a native object.
   * @return The raw pointer obj is proxying for.
   */
  protected static long getCPtr(BitStreamFilter obj) {
    if (obj == null) return 0;
    return obj.getMyCPtr();
  }

  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that we're proxying for.
   *   
   * @return The raw pointer we're proxying for.
   */  
  protected long getMyCPtr() {
    if (swigCPtr == 0) throw new IllegalStateException("underlying native object already deleted");
    return swigCPtr;
  }
  
  /**
   * Create a new BitStreamFilter object that is actually referring to the
   * exact same underlying native object.
   *
   * @return the new Java object.
   */
  @Override
  public BitStreamFilter copyReference() {
    if (swigCPtr == 0)
      return null;
    else
      return new BitStreamFilter(swigCPtr, swigCMemOwn, getJavaRefCount());
  }

  /**
   * Compares two values, returning true if the underlying objects in native code are the same object.
   *
   * That means you can have two different Java objects, but when you do a comparison, you'll find out
   * they are the EXACT same object.
   *
   * @return True if the underlying native object is the same.  False otherwise.
   */
  public boolean equals(Object obj) {
    boolean equal = false;
    if (obj instanceof BitStreamFilter)
      equal = (((BitStreamFilter)obj).swigCPtr == this.swigCPtr);
    return equal;
  }
  
  /**
   * Get a hashable value for this object.
   *
   * @return the hashable value.
   */
  public int hashCode() {
     return (int)swigCPtr;
  }
  
  // <<<<<<<<<<<<<<<<<<<<<<<<<<<
  // JNIHelper.swg: End generated code
  
  /**
   * info about this filter object
   * @return information about this object
   */
   
  @Override
  public String toString()
  {
    StringBuilder result = new StringBuilder();
    
    result.append(this.getClass().getName()+"@"+hashCode()+"[");
    result.append("name:"+getName()+";");
    result.append("]");
    return result.toString();
  }
  

/**
 * Get the state this BitStreamFilter is in.
 */
  public BitStreamFilter.State getState() {
    return BitStreamFilter.State.swigToEnum(VideoJNI.BitStreamFilter_getState(swigCPtr, this));
  }

/**
 * Opens this bitstream filter. Callers are responsible for<br>
 * calling setProperty(...) on this with the appropriate<br>
 * properties before opening.
 */
  public void open() {
    VideoJNI.BitStreamFilter_open(swigCPtr, this);
  }

/**
 * Submit a packet for filtering.<br>
 * <br>
 * After sending each packet, the filter must be completely drained by calling<br>
 * receive() repeatedly until it returns a non RESULT_SUCCESS result.<br>
 * <br>
 * @param packet the packet to filter. This parameter may be NULL, which signals the end of the stream (i.e. no more<br>
 * packets will be sent). That will cause the filter to output any packets it<br>
 * may have buffered internally.<br>
 * <br>
 * @return RESULT_SUCCESS on success, or RESULT_AWAITING_DATA if the user should<br>
 *   call #receive(Media) first.
 */
  public ProcessorResult sendPacket(MediaPacket packet) {
    return ProcessorResult.swigToEnum(VideoJNI.BitStreamFilter_sendPacket(swigCPtr, this, MediaPacket.getCPtr(packet), packet));
  }

  public ProcessorResult sendEncoded(MediaEncoded media) {
    return ProcessorResult.swigToEnum(VideoJNI.BitStreamFilter_sendEncoded(swigCPtr, this, MediaEncoded.getCPtr(media), media));
  }

/**
 * Retrieve a filtered packet.<br>
 * <br>
 * @param packet this struct will be filled with the contents of the filtered<br>
 *                 packet. If this function returns<br>
 *                 successfully, the contents of packet will be completely<br>
 *                 overwritten by the returned data.<br>
 * <br>
 * @return RESULT_SUCCESS on success. RESULT_AWAITING_DATA if more packets need<br>
 * to be sent to the filter to get more output. RESULT_END_OF_STREAM if there<br>
 * will be no further output from the filter. Otherwise an exception will<br>
 * be thrown for errors.<br>
 * <br>
 * Note: one input packet may result in several output packets, so after sending<br>
 * a packet with #send(Media), this function needs to be called<br>
 * repeatedly until it stops returning RESULT_SUCCESS.<br>
 * It is also possible for a filter to<br>
 * output fewer packets than were sent to it, so this function may return<br>
 * RESULT_AWAITING_DATA immediately after a successful #send(Media) call.
 */
  public ProcessorResult receivePacket(MediaPacket packet) {
    return ProcessorResult.swigToEnum(VideoJNI.BitStreamFilter_receivePacket(swigCPtr, this, MediaPacket.getCPtr(packet), packet));
  }

  public ProcessorResult receiveEncoded(MediaEncoded media) {
    return ProcessorResult.swigToEnum(VideoJNI.BitStreamFilter_receiveEncoded(swigCPtr, this, MediaEncoded.getCPtr(media), media));
  }

/**
 * Create a filter given the name.<br>
 * <br>
 * @param filtername The name of the filter.<br>
 * <br>
 * @see BitStreamFilterType
 */
  public static BitStreamFilter make(String filtername) {
    long cPtr = VideoJNI.BitStreamFilter_make__SWIG_0(filtername);
    return (cPtr == 0) ? null : new BitStreamFilter(cPtr, false);
  }

/**
 * Create a filter given the type.<br>
 * <br>
 * @param type The type of the filter.<br>
 * <br>
 * @see BitStreamFilterType
 */
  public static BitStreamFilter make(BitStreamFilterType type) {
    long cPtr = VideoJNI.BitStreamFilter_make__SWIG_1(BitStreamFilterType.getCPtr(type), type);
    return (cPtr == 0) ? null : new BitStreamFilter(cPtr, false);
  }

/**
 * Get the type of this filter.
 */
  public BitStreamFilterType getType() {
    long cPtr = VideoJNI.BitStreamFilter_getType(swigCPtr, this);
    return (cPtr == 0) ? null : new BitStreamFilterType(cPtr, false);
  }

/**
 * Get the name of this filter.
 */
  public String getName() {
    return VideoJNI.BitStreamFilter_getName(swigCPtr, this);
  }

  /**
   * The state that a BitStreamFilter can be in.
   */
  public enum State {
    STATE_INITED,
    STATE_OPENED,
    STATE_FLUSHING,
    STATE_ERROR,
  ;

    public final int swigValue() {
      return swigValue;
    }

    public static State swigToEnum(int swigValue) {
      State[] swigValues = State.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (State swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + State.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private State() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private State(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private State(State swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
